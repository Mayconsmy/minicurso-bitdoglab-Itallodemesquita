#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "pico/binary_info.h"
#include "pico/stdlib.h"

#include "hardware/i2c.h"
#include "ssd1306.h"

// Definindo pinos para I2C
const uint I2C_SDA = 14;
const uint I2C_SCL = 15;

// Macro útil para contar elementos em um array
#define count_of(arr) (sizeof(arr) / sizeof((arr)[0]))

// Inicializa pino como saída para LED
void initLed(uint pin) {
    gpio_init(pin);
    gpio_set_dir(pin, GPIO_OUT);
}

// Atualiza estado de LEDs RGB
void putLed(uint red, uint green, uint blue, bool r, bool g, bool b) {
    gpio_put(red, r);
    gpio_put(green, g);
    gpio_put(blue, b);
}

// Inicializa pino como entrada para botão com pull-up
void initButton(uint pin) {
    gpio_init(pin);
    gpio_set_dir(pin, GPIO_IN);
    gpio_pull_up(pin);
}

// Inicializa o display SSD1306
void initDisplay(uint8_t *ssd, struct render_area *frame_area) {
    i2c_init(i2c1, ssd1306_i2c_clock * 1000); // Inicializa I2C
    gpio_set_function(I2C_SDA, GPIO_FUNC_I2C);
    gpio_set_function(I2C_SCL, GPIO_FUNC_I2C);
    gpio_pull_up(I2C_SDA);
    gpio_pull_up(I2C_SCL);

    // Dependendo da sua biblioteca, talvez precise passar `i2c1`
    ssd1306_init(i2c1); 

    *frame_area = (struct render_area){
        .start_column = 0,
        .end_column = ssd1306_width - 1,
        .start_page = 0,
        .end_page = ssd1306_n_pages - 1
    };

    calculate_render_area_buffer_length(frame_area);

    memset(ssd, 0, ssd1306_buffer_length);

    render_on_display(ssd, frame_area);
}

// Escreve várias linhas de texto no display
void typeText(uint8_t *ssd, struct render_area frame_area, char *text[], int count_of) {
    memset(ssd, 0, ssd1306_buffer_length);

    int y = 0;
    for (uint i = 0; i < count_of; i++) {
        ssd1306_draw_string(ssd, 0, y, text[i]);
        y += 8;
    }

    render_on_display(ssd, &frame_area);
}

int main() {
    stdio_init_all(); // Inicializa UART para debug se necessário

    const uint botao_A = 4;
    const uint botao_B = 5;
    const uint led_vermelho = 13;
    const uint led_verde = 11;
    const uint led_azul = 12;

    // Inicializa LEDs e botões
    initLed(led_vermelho);
    initLed(led_verde);
    initLed(led_azul);

    initButton(botao_A);
    initButton(botao_B);

    // Buffer e área para o display
    uint8_t ssd[ssd1306_buffer_length];
    struct render_area frame_area;

    initDisplay(ssd, &frame_area);

    while (true) {
        // Mensagem a ser exibida
        char *message[] = {"", "   Hello World", "      ECOP!"};

        // Exibe texto no display
        typeText(ssd, frame_area, message, count_of(message));

        // Acende LED verde
        putLed(led_vermelho, led_verde, led_azul, 0, 1, 0);

        sleep_ms(10000);
    }

    return 0;
}
